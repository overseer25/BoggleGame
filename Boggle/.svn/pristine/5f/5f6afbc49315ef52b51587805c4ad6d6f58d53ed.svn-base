-==========================================-
Josh Oblinsky, Ryan Kingston, & Joe Zachary
CS 3500
12/1/2014
PS9 (Boggle Client)
-==========================================-
*
*
*
|--------------------------------|Files|--------------------------------|

This solution contains the following files:

- BoggleBoard.cs : Contains all information for setting up the boggle game board, including the die faces,
					and procedural generation of the board. This class was written by Joe Zachary.

- BoggleServer.cs : Contains all information for building the connections among the clients to the server.
					this project also handles all console outputs and game states. Written by Josh
					Oblinsky and Ryan Kingston.

- BoggleTester.cs : The main test class for the Boggle game program. Tests the functionality of the
					program to ensure proper implementation.

- README : Contains all documentation for developers.

|-----------------------------------------------------------------------|
*
*
*
|=========================Project Documentation=========================|

- Player 1 holds the connection between server and player 1.
- Player 2 holds the connection between server and player 2.
- The server is a TCP Listener, and contains the connections between itself and all of the clients.

- When the number of players in the queue is divisible by 2, the program will dequeue 2 players, and
  create a game session using them. A boggle board is created for the players, as well.

- Upon connecting to the server, the client will send it's name to the server.
- Upon receiving a connection from 2 clients, the server will send the string "START $ # @", where $ is the 
  optional 16 character board, # is the game time in seconds, and @ is the opponent's name.
- Afterwards, the server will build a game session, and pass the players and board to the game session.
- The server will then await new.

- Should a player leave a session, the remaining player will be notified, and the socket connection will be
  closed.

- Player class contains a method to send the IGNORING [message] message to the user when they
  input an invalid command.

- If the server receives a null string, that indicates that it has lost connection with the client
  that sent it. This will allow the server to know when to close a game session.

- In our attempts to determine code coverage, we discovered that some of the tests would simply not execute when run in parallel with other tests, thus
  causing their code coverage to not be take into account. This resulted in the code coverage displayed to be significantly smaller than the actually
  coverage amount. Because of this, we approximated by running the tests one-by-one, and doing a weighted average to determine the correct code coverage, which
  we had determined to be ~87%.

|=======================================================================|


%-------------------------------------%
Time Log:

Monday:    3:00pm  - 5:45pm (2 3/4 hours)
Tuesday:   10:30am - 1:30pm (3 hours)
Wednesday: 4:00pm  - 5:45pm (1 3/4 hours)
Friday:    1:00pm  - 5:30pm (4 1/2 hours)
Saturday:  2:00    - 5:00pm (3 hours)
Monday:    2:00    - 5:45 (3 1/4 hours)
Tuesday:   2:00	   - 6:30 (4 1/2 hours)
		   8:00    - 11:30(3 1/2 hours)

Sum: +20
%-------------------------------------%

Questions for TAs:

Q: Are we required to handle the case where the client disconnects from the server before entering a game?
Q: Are our namespace and class allowed to have the same name, BoggleServer?
A: yes, the specs doesn't say so the answer is yes
Q: (?) Are the clients and the server required to have the same port?
A: They are on separate sockets so they will still get all their individual data even though they are on the same IP Address and port
Q: How do we know when the socket becomes disconnected from the game?
A: The official dll sends a null string in the callback when the socket was disconnected



 /\_/\
( O.O ) 
 >   <

 /\_/\
( O.O )
 >   <

 /\_/\
( O.O )
 >   <
