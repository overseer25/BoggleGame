using System;
using CustomNetworking;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net.Sockets;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using BoggleServer;
using System.Windows.Threading;

namespace BoggleClient
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private List<TextBox> grid;
        private Client clientWork;
        public MainWindow()
        {
            clientWork = new Client();
            clientWork.Terminate += Terminated;
            clientWork.StartGame += StartGame;
            clientWork.UpdateTime += UpdateTime;
            clientWork.UpdateScores += UpdateScore;
            clientWork.UpdateWordList += UpdateListOfWords;
            clientWork.EndGame += EndGame;

            InitializeComponent();
            grid = new List<TextBox>() { Board1, Board2, Board3, Board4, Board5, Board6
            , Board7, Board8, Board9, Board10, Board11, Board12, Board13, Board14, Board15
            , Board16};
            CancelButton.Visibility = Visibility.Hidden;

            //Set focus to name text box.
            NameTextbox.Focus();

            //Hide tab controls
            Style s = new Style();
            s.Setters.Add(new Setter(UIElement.VisibilityProperty, Visibility.Collapsed));
            tabControl.ItemContainerStyle = s;
            System.Diagnostics.Debug.WriteLine("Sending " + WordTextbox.Text);
        }

        /// <summary>
        /// Event handler for dealing with the event when the game is starting.
        /// </summary>
        /// <param name="boggleBoard"></param>
        /// <param name="opponentName"></param>
        private void StartGame(String boggleBoard, String opponentName)
        {
            Dispatcher.BeginInvoke(new Action(() => {
                tabControl.SelectedIndex = 1;

                int i = 0;
                //TODO: Begin the game once the START string has been received.
                foreach(TextBox textbox in grid) {
                    textbox.Text = boggleBoard.ElementAt(i).ToString();
                    i++;
                }
                OpponenetNameTextbox.Content += opponentName;
            }));
        }

        /// <summary>
        /// Event handler for dealing with the even when the time needs to be updated.
        /// </summary>
        /// <param name="time"></param>
        private void UpdateTime(string time)
        {
            //TODO: Create textbox to hold time, and update it here.
            Dispatcher.BeginInvoke(new Action(() => TimeTextBox.Text = time));
        }

        /// <summary>
        /// Event handler for dealing with the event when the scores need to be updated.
        /// </summary>
        /// <param name="score1"></param>
        /// <param name="score2"></param>
        private void UpdateScore(String score1, String score2)
        {
            //TODO: Create textboxes to hold scores, and update them here.
            Dispatcher.BeginInvoke(new Action(() => YourScore.Text = score1.ToString()));
            Dispatcher.BeginInvoke(new Action(() => OpponentScore.Text = score2.ToString()));
        }

        /// <summary>
        /// Event Handler for updating the word list.
        /// </summary>
        private void UpdateListOfWords(String word)
        {
            Dispatcher.BeginInvoke(new Action(() => WordListTextbox.Items.Add(word)));
        }

        /// <summary>
        /// Event handler for dealing with the event when the client loses connection to the server.
        /// </summary>
        /// <param name="msg"></param>
        private void LostConnection(String msg)
        {
            MessageBox.Show(msg);
        }

        /// <summary>
        /// Event handler for dealing with the event when the game is concluding.
        /// </summary>
        /// <param name="myLegalWords"></param>
        /// <param name="oppLegalWords"></param>
        /// <param name="commonWords"></param>
        /// <param name="myIllegalWords"></param>
        /// <param name="oppIllegalWords"></param>
        private void EndGame(String[] myLegalWords, String[] oppLegalWords, String[] commonWords, String[] myIllegalWords, String[] oppIllegalWords)
        {
            Dispatcher.BeginInvoke(new Action(() => {
                foreach(String word in myLegalWords) {
                    myUniqueWordsListBox.Items.Add(word);
                }
                if(myLegalWords.Length == 0)
                    myUniqueWordsListBox.Items.Add("No unique words played.");

                foreach(String word in oppLegalWords) {
                    oppUniqueWordsListBox.Items.Add(word);
                }
                if(oppLegalWords.Length == 0)
                    oppUniqueWordsListBox.Items.Add("No unique words played.");

                foreach(String word in commonWords) {
                    commonWordsListBox.Items.Add(word);
                }
                if(commonWords.Length == 0)
                    commonWordsListBox.Items.Add("No common words played.");

                foreach(String word in myIllegalWords) {
                    myIllegalWordsListBox.Items.Add(word);
                }
                if(myIllegalWords.Length == 0)
                    myIllegalWordsListBox.Items.Add("No illegal words played.");

                foreach(String word in oppIllegalWords) {
                    oppIllegalWordsListBox.Items.Add(word);
                }
                if(oppIllegalWords.Length == 0)
                    oppIllegalWordsListBox.Items.Add("No illegal words played.");

                tabControl.SelectedIndex = 2;

            }));
        }

        /// <summary>
        /// Event handler for dealing with the event when the opposing client disconnects from the server.
        /// </summary>
        /// <param name="msg"></param>
        private void Terminated(String msg)
        {
            //TODO: transition back to the main menu to inform the player 
            //that the game has been terminated.
            MessageBox.Show(msg);
            Dispatcher.Invoke(new Action(() => tabControl.SelectedIndex = 0));

            Dispatcher.Invoke(new Action(() => CancelButton.Visibility = Visibility.Hidden));
            Dispatcher.Invoke(new Action(() => PlayButton.Content = "Play"));
            Dispatcher.Invoke(new Action(() => PlayButton.IsEnabled = true));
            Dispatcher.Invoke(new Action(() => NameTextbox.Text = ""));
            Dispatcher.Invoke(new Action(() => PlayButton.IsEnabled = true));

            Dispatcher.Invoke(new Action(() => OpponenetNameTextbox.Content = OpponenetNameTextbox.Content.ToString().Substring(0, 9)));
        }


        /// <summary>
        /// Executes when the player clicks the Play button.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PlayButton_Click(object sender, EventArgs e)
        {
            Dispatcher.Invoke(new Action(() => NameTextbox.IsEnabled = false));
            Dispatcher.Invoke(new Action(() => IPTextbox.IsEnabled = false));
            Dispatcher.Invoke(new Action(() => CancelButton.Visibility = Visibility.Visible));
            Dispatcher.Invoke(new Action(() => PlayButton.IsEnabled = false));
            Dispatcher.Invoke(new Action(() => PlayButton.Content = "Connected"));
            clientWork.Connect(NameTextbox.Text, IPTextbox.Text);
        }

        /// <summary>
        /// Event handler for hitting the enter key.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void EnterKeyHandler(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter && NameTextbox.IsFocused)
            {
                IPTextbox.Focus();
            }
            else if (e.Key == Key.Enter && IPTextbox.IsFocused)
            {
                PlayButton_Click(sender, e);
            }
            else if(e.Key == Key.Enter && WordTextbox.IsFocused)
            {
                System.Diagnostics.Debug.WriteLine("Sending " + WordTextbox.Text);

                clientWork.SendWord(WordTextbox.Text);
                Dispatcher.BeginInvoke(new Action(() => WordTextbox.Text = ""));
            }
        }

        /// <summary>
        /// Event for clicking the cancel button.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            CancelButton.Visibility = Visibility.Hidden;

            Dispatcher.Invoke(new Action(() => NameTextbox.IsEnabled = true));
            Dispatcher.Invoke(new Action(() => IPTextbox.IsEnabled = true));

            clientWork.CleanUpConnection();

            Dispatcher.Invoke(new Action(() => PlayButton.IsEnabled = true));
            Dispatcher.Invoke(new Action(() => PlayButton.Content = "Play"));
            Dispatcher.Invoke(new Action(() => YourScore.Text = "0"));
            Dispatcher.Invoke(new Action(() => OpponentScore.Text = "0"));
        }

        /// <summary>
        /// Called when the connection to the server has failed.
        /// </summary>
        public void ConnectionFailed()
        {
            MessageBox.Show("Connection failed. Check IPAddress and try again. Ch33ky skrub.");
            CancelButton_Click(null, null);
        }

    }
}
